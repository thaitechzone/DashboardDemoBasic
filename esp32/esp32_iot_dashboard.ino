#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <DHT.h>

// WiFi credentials - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
const char* ssid = "YOUR_WIFI_SSID";         // ‡∏ä‡∏∑‡πà‡∏≠ WiFi ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
const char* password = "YOUR_WIFI_PASSWORD"; // ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô WiFi ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

// Server configuration - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô IP ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô server
const char* serverURL = "http://192.168.1.100:5000"; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô IP ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á server

// DHT22 sensor configuration
#define DHT_PIN 4          // GPIO4 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå DHT22
#define DHT_TYPE DHT22     // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
#define LED_PIN 2          // GPIO2 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LED

// Initialize DHT sensor
DHT dht(DHT_PIN, DHT_TYPE);

// Variables
float temperature = 0.0;
float humidity = 0.0;
bool ledState = false;
unsigned long lastSensorRead = 0;
unsigned long lastServerCheck = 0;
const unsigned long sensorInterval = 2000;    // ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏∏‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
const unsigned long serverInterval = 3000;    // ‡πÄ‡∏ä‡πá‡∏Ñ server ‡∏ó‡∏∏‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

void setup() {
  Serial.begin(115200);
  
  // Initialize pins
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);
  
  // Initialize DHT sensor
  dht.begin();
  
  Serial.println("=== ESP32 IoT Dashboard ===");
  Serial.println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö...");
  
  // Connect to WiFi
  connectToWiFi();
  
  // Test server connection
  testServerConnection();
  
  Serial.println("‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô!");
  Serial.println("DHT22 Sensor: GPIO4");
  Serial.println("LED Control: GPIO2");
  Serial.println("========================");
}

void loop() {
  // Check WiFi connection
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi ‡∏Ç‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà...");
    connectToWiFi();
  }
  
  // Read sensor data
  if (millis() - lastSensorRead >= sensorInterval) {
    readSensorData();
    sendSensorData();
    lastSensorRead = millis();
  }
  
  // Check LED status from server
  if (millis() - lastServerCheck >= serverInterval) {
    checkLEDStatus();
    lastServerCheck = millis();
  }
  
  delay(100); // Small delay to prevent overwhelming the system
}

void connectToWiFi() {
  WiFi.begin(ssid, password);
  Serial.print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi");
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 30) {
    delay(1000);
    Serial.print(".");
    attempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println();
    Serial.println("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println();
    Serial.println("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi ‡πÑ‡∏î‡πâ!");
    Serial.println("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô WiFi");
  }
}

void readSensorData() {
  // Read temperature and humidity
  float newTemp = dht.readTemperature();
  float newHum = dht.readHumidity();
  
  // Check if readings are valid
  if (isnan(newTemp) || isnan(newHum)) {
    Serial.println("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå DHT22 ‡πÑ‡∏î‡πâ!");
    Serial.println("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢:");
    Serial.println("- VCC -> 3.3V");
    Serial.println("- GND -> GND"); 
    Serial.println("- DATA -> GPIO4");
    return;
  }
  
  temperature = newTemp;
  humidity = newHum;
  
  // Print sensor data to Serial Monitor
  Serial.println("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå:");
  Serial.printf("   üå°Ô∏è  ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: %.1f¬∞C\n", temperature);
  Serial.printf("   üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: %.1f%%\n", humidity);
}

void sendSensorData() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ");
    return;
  }
  
  HTTPClient http;
  http.begin(String(serverURL) + "/api/sensor-data");
  http.addHeader("Content-Type", "application/json");
  
  // Create JSON payload
  DynamicJsonDocument doc(1024);
  doc["temperature"] = temperature;
  doc["humidity"] = humidity;
  
  String jsonString;
  serializeJson(doc, jsonString);
  
  // Send POST request
  int httpResponseCode = http.POST(jsonString);
  
  if (httpResponseCode > 0) {
    String response = http.getString();
    if (httpResponseCode == 200) {
      Serial.println("‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } else {
      Serial.printf("‚ö†Ô∏è  Server ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™: %d\n", httpResponseCode);
    }
  } else {
    Serial.printf("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: %d\n", httpResponseCode);
    Serial.println("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:");
    Serial.println("- Server IP Address ‡πÉ‡∏ô serverURL");
    Serial.println("- Server ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà");
    Serial.println("- Port 5000 ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà");
  }
  
  http.end();
}

void checkLEDStatus() {
  if (WiFi.status() != WL_CONNECTED) {
    return;
  }
  
  HTTPClient http;
  http.begin(String(serverURL) + "/api/esp32/led-status");
  
  int httpResponseCode = http.GET();
  
  if (httpResponseCode == 200) {
    String payload = http.getString();
    
    DynamicJsonDocument doc(1024);
    deserializeJson(doc, payload);
    
    bool newLedState = doc["ledStatus"].as<int>() == 1;
    
    if (newLedState != ledState) {
      ledState = newLedState;
      digitalWrite(LED_PIN, ledState ? HIGH : LOW);
      Serial.printf("üí° LED: %s\n", ledState ? "‡πÄ‡∏õ‡∏¥‡∏î (ON)" : "‡∏õ‡∏¥‡∏î (OFF)");
    }
  } else if (httpResponseCode > 0) {
    Serial.printf("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ LED ‡πÑ‡∏î‡πâ ‡∏£‡∏´‡∏±‡∏™: %d\n", httpResponseCode);
  }
  
  http.end();
}

void testServerConnection() {
  Serial.println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Server...");
  
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Server ‡πÑ‡∏î‡πâ");
    return;
  }
  
  HTTPClient http;
  http.begin(String(serverURL) + "/api/health");
  
  int httpResponseCode = http.GET();
  
  if (httpResponseCode == 200) {
    Serial.println("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Server ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
    String response = http.getString();
    Serial.println("Server Response: " + response);
  } else if (httpResponseCode > 0) {
    Serial.printf("‚ö†Ô∏è  Server ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™: %d\n", httpResponseCode);
  } else {
    Serial.printf("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Server ‡πÑ‡∏î‡πâ ‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: %d\n", httpResponseCode);
    Serial.println("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:");
    Serial.println("- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô serverURL ‡πÄ‡∏õ‡πá‡∏ô IP Address ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô server");
    Serial.println("- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ server ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà port 5000");
    Serial.println("- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Firewall ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢");
  }
  
  http.end();
}

// Debug information printing every 30 seconds
void printDebugInfo() {
  static unsigned long lastDebug = 0;
  if (millis() - lastDebug >= 30000) {
    Serial.println("\n=== Debug Information ===");
    Serial.printf("WiFi Status: %s\n", WiFi.status() == WL_CONNECTED ? "Connected" : "Disconnected");
    Serial.printf("WiFi RSSI: %d dBm\n", WiFi.RSSI());
    Serial.printf("Free Heap: %d bytes\n", ESP.getFreeHeap());
    Serial.printf("Uptime: %lu seconds\n", millis() / 1000);
    Serial.printf("Temperature: %.1f¬∞C\n", temperature);
    Serial.printf("Humidity: %.1f%%\n", humidity);
    Serial.printf("LED State: %s\n", ledState ? "ON" : "OFF");
    Serial.println("========================\n");
    lastDebug = millis();
  }
}